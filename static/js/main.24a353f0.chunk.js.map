{"version":3,"sources":["store/context.js","components/UI/Avatar.jsx","components/Sidebar/Chat.jsx","components/Sidebar/ChatsList.jsx","components/UI/Dropdown.jsx","components/Sidebar/Profile.jsx","components/Sidebar/Search.jsx","components/Sidebar/Sidebar.jsx","components/Chatting/Header.jsx","components/Chatting/Message.jsx","assets/ES_Mouth Pop 1 - SFX Producer.mp3","assets/ES_Mouth Pop 2 - SFX Producer.mp3","components/Chatting/MessagesList.jsx","components/Chatting/Form.jsx","components/Chatting/Alert.jsx","components/Chatting/Main.jsx","firebase.js","components/Login/Login.jsx","App.jsx","index.js"],"names":["React","createContext","Avatar","src","size","draggable","className","alt","useStyles","makeStyles","chat","display","padding","alignItems","gap","active","backgroundColor","Chat","email","name","thumbnail","lastMessage","lastActive","onSelect","firstName","split","mLastMessage","length","slice","mLastActive","Intl","DateTimeFormat","format","Date","classes","CardActionArea","onClick","ChatsList","useContext","context","user","chats","messagesObj","userMessages","activeChat","onChatSelect","parseEmail","value","useState","chatsList","setChatsList","useEffect","map","i","messages","date","content","provider","Dropdown","listItems","alignRight","item","Button","Profile","isDropdownShown","setIsDropdownShown","signOut","addChat","IconButton","prompt","fontSize","prev","alert","Search","type","placeholder","Sidebar","Header","deleteChat","resetChat","activeChatObj","find","id","uuid","confirmation","Message","you","divRef","time","moment","toISOString","fromNow","deleteMessage","viewMessageInfo","ref","style","pop_1SoundEffect","Howl","sound_1Src","volume","pop_2SoundEffect","sound_2Src","MessagesList","lastMessagesNumber","useRef","messagesListRef","messagesList","scrollToBottom","current","element","scrollTop","scrollHeight","play","Form","isPickerShown","setIsPickerShown","setContent","addMessage","onSubmit","e","preventDefault","onEmojiClick","emojiObject","prevArr","push","emoji","join","onChange","target","Alert","friendsNumber","Card","href","rel","Main","chatsEmails","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","database","auth","GoogleAuthProvider","root","marginLeft","Login","onSignIn","isLoading","error","circleClasses","Paper","elevation","severity","variant","startIcon","CircularProgress","emailArr","lastIndexOf","App","setUser","setChatsEmails","setChats","setUserMessages","setActiveChat","setValue","setIsLoading","setError","a","onAuthStateChanged","accountData","console","log","displayName","photoURL","signIn","signInWithPopup","data","additionalUserInfo","isNewUser","profile","picture","set","localStorage","setItem","JSON","stringify","message","setTimeout","on","snapshot","val","emails","Object","keys","includes","key","off","Promise","all","chatEmail","once","info","newChats","Error","isExisted","updates","update","updateActiveChatMessages","Provider","removeItem","remove","newChatsEmails","splice","indexOf","findIndex","toString","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24a353f0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default React.createContext();\r\n","import React from 'react';\r\n\r\nexport default function Avatar({ src, size }) {\r\n  return (\r\n    <img\r\n      draggable={false}\r\n      className={`avatar ${size === 'big' && 'big'}`}\r\n      alt=\"\"\r\n      src={src}\r\n    />\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Avatar from '../UI/Avatar';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles({\r\n  chat: {\r\n    display: 'flex',\r\n    padding: '8px',\r\n    alignItems: 'center',\r\n    gap: '.5rem',\r\n  },\r\n  active: {\r\n    backgroundColor: 'var(--color-lightGrey)',\r\n  },\r\n});\r\n\r\nexport default function Chat({\r\n  email,\r\n  name,\r\n  thumbnail,\r\n  lastMessage,\r\n  lastActive,\r\n  active,\r\n  onSelect,\r\n}) {\r\n  const firstName = name.split(' ')[0];\r\n  const mLastMessage =\r\n    lastMessage.length < 25 ? lastMessage : `${lastMessage.slice(0, 22)}...`;\r\n  const mLastActive =\r\n    lastActive !== 'none'\r\n      ? Intl.DateTimeFormat('en-us').format(new Date(lastActive))\r\n      : 'none';\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <CardActionArea\r\n      className={`${classes.chat} ${active && classes.active}`}\r\n      onClick={() => onSelect(email)}\r\n    >\r\n      <Avatar src={thumbnail} size=\"big\" />\r\n\r\n      <div className=\"chat__content\">\r\n        <div className=\"chat__info\">\r\n          <div className=\"chat__name\">{firstName}</div>\r\n          <div className=\"u-shadded-text u-small-text\">{mLastMessage}</div>\r\n        </div>\r\n        <div className=\"chat__info\">\r\n          <div className=\"u-shadded-text u-vSmall-text\">{mLastActive}</div>\r\n        </div>\r\n      </div>\r\n    </CardActionArea>\r\n  );\r\n}\r\n","import React, { useContext, useState, useEffect } from 'react';\r\nimport context from '../../store/context';\r\nimport Chat from './Chat';\r\n\r\nexport default function ChatsList() {\r\n  const {\r\n    user,\r\n    chats,\r\n    userMessages: messagesObj,\r\n    activeChat,\r\n    onChatSelect,\r\n    parseEmail,\r\n    value,\r\n  } = useContext(context);\r\n  const [chatsList, setChatsList] = useState([]);\r\n\r\n  // updating chats list with chats change (which is changed by chatsEmails change)\r\n\r\n  useEffect(() => {\r\n    if (chats) {\r\n      setChatsList(\r\n        chats.map(({ email, name, thumbnail }, i) => {\r\n          let lastMessage;\r\n          if (messagesObj[parseEmail(email)]) {\r\n            const messages = messagesObj[parseEmail(email)].messages;\r\n            lastMessage = messages[messages.length - 1];\r\n          }\r\n          return (\r\n            <Chat\r\n              key={i}\r\n              email={email}\r\n              name={name}\r\n              thumbnail={thumbnail}\r\n              lastActive={lastMessage?.date || 'none'}\r\n              lastMessage={`${\r\n                lastMessage?.content\r\n                  ? lastMessage?.provider === user.email\r\n                    ? `You: ${lastMessage?.content}`\r\n                    : lastMessage?.content\r\n                  : 'The chat is empty'\r\n              }`}\r\n              active={email === activeChat}\r\n              onSelect={() => onChatSelect(email)}\r\n            />\r\n          );\r\n        }),\r\n      );\r\n    }\r\n  }, [chats, activeChat, value]);\r\n\r\n  return <div className=\"chatsList\">{chatsList}</div>;\r\n}\r\n","import Button from '@material-ui/core/Button';\r\nimport React from 'react';\r\n\r\nexport default function Dropdown({ listItems, alignRight }) {\r\n  return (\r\n    <div className={`dropdown ${alignRight && 'align-right'}`}>\r\n      {listItems.map((item, i) => (\r\n        <div key={i} className=\"dropdown__listItem\">\r\n          <Button size=\"large\" onClick={item[1]}>\r\n            <span>{item[0]}</span>\r\n          </Button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport Avatar from '../UI/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Dropdown from '../UI/Dropdown';\r\nimport context from '../../store/context';\r\n\r\nimport {\r\n  BsFillChatSquareDotsFill as Chat,\r\n  BsThreeDotsVertical as Menu,\r\n} from 'react-icons/bs';\r\n\r\nexport default function Profile() {\r\n  const [isDropdownShown, setIsDropdownShown] = useState(false);\r\n  const {\r\n    user: { email, name, thumbnail },\r\n    signOut,\r\n    addChat,\r\n  } = useContext(context);\r\n\r\n  const showProfile = () => {\r\n    alert(`Email Address: ${email} \\nFull Name: ${name} `);\r\n  };\r\n\r\n  return (\r\n    <div className=\"profile\">\r\n      <div className=\"profile__info\">\r\n        <Avatar src={thumbnail} />\r\n\r\n        <h2 className=\"header-secondary\">{name.split(' ')[0]}</h2>\r\n      </div>\r\n\r\n      <div className=\"profile__btns\">\r\n        <IconButton\r\n          onClick={() => {\r\n            const email = prompt('The Email Adress...');\r\n            addChat(email);\r\n          }}\r\n        >\r\n          <Chat fontSize=\"large\" />\r\n        </IconButton>\r\n        <div className=\"dropdown__group\">\r\n          <IconButton onClick={() => setIsDropdownShown(prev => !prev)}>\r\n            <Menu fontSize=\"large\" />\r\n          </IconButton>\r\n          {isDropdownShown && (\r\n            <Dropdown\r\n              listItems={[\r\n                ['Profile', showProfile],\r\n                ['Sign Out', signOut],\r\n              ]}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { AiOutlineSearch as SearchIcon } from 'react-icons/ai';\r\n\r\nexport default function Search() {\r\n  return (\r\n    <div className=\"search\">\r\n      <div className=\"search__container\">\r\n        <SearchIcon className=\"search__icon\" />\r\n        <input type=\"text\" className=\"search__input\" placeholder=\"Search...\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ChatsList from './ChatsList';\r\nimport Profile from './Profile';\r\nimport Search from './Search';\r\n\r\nexport default function Sidebar() {\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <Profile />\r\n      <Search />\r\n      <ChatsList />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport Avatar from '../UI/Avatar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport { BsThreeDotsVertical as Menu } from 'react-icons/bs';\r\nimport Dropdown from '../UI/Dropdown';\r\nimport context from '../../store/context';\r\nimport { v4 as uuid } from 'uuid';\r\n\r\nexport default function Header() {\r\n  const { chats, activeChat, deleteChat, resetChat } = useContext(context);\r\n  const [isDropdownShown, setIsDropdownShown] = useState(false);\r\n\r\n  const activeChatObj = chats.find(chat => chat.email === activeChat);\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Avatar src={activeChatObj.thumbnail} />\r\n      <div className=\"header__content\">\r\n        <div className=\"header__name\">{activeChatObj.name}</div>\r\n        <div className=\"dropdown__group\">\r\n          <IconButton onClick={() => setIsDropdownShown(prev => !prev)}>\r\n            <Menu fontSize=\"large\" />\r\n          </IconButton>\r\n          {isDropdownShown && (\r\n            <Dropdown\r\n              listItems={[\r\n                [\r\n                  'Delete Chat',\r\n                  () => {\r\n                    const id = uuid();\r\n                    const confirmation = prompt(\r\n                      `Are you sure that you want to delete this chat?\\nPlease re-write ${id} to delete the chat`,\r\n                    );\r\n                    if (id === confirmation) {\r\n                      deleteChat(activeChat);\r\n                    }\r\n                    if (id !== confirmation) {\r\n                      alert(\r\n                        \"The chat won't be deleted as you didn't re-write the code correctly\",\r\n                      );\r\n                    }\r\n                  },\r\n                ],\r\n                [\r\n                  'Reset Chat',\r\n                  () => {\r\n                    const id = uuid();\r\n                    const confirmation = prompt(\r\n                      `Are you sure that you want to Reset this chat?\\nPlease re-write ${id} to delete the chat`,\r\n                    );\r\n                    if (id === confirmation) {\r\n                      resetChat(activeChat);\r\n                    }\r\n                    if (id !== confirmation) {\r\n                      alert(\r\n                        \"The chat won't be reseted as you didn't re-write the code correctly\",\r\n                      );\r\n                    }\r\n                  },\r\n                ],\r\n              ]}\r\n              alignRight={true}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import IconButton from '@material-ui/core/IconButton';\r\nimport React, { useContext, useState } from 'react';\r\nimport { FaAngleDown as AngleDown } from 'react-icons/fa';\r\nimport Dropdown from '../UI/Dropdown';\r\nimport moment from 'moment';\r\nimport context from '../../store/context';\r\n\r\nexport default function Message({ content, you, date, divRef, id }) {\r\n  const [isDropdownShown, setIsDropdownShown] = useState(false);\r\n  const time = moment(date.toISOString()).fromNow();\r\n  const { deleteMessage, viewMessageInfo } = useContext(context);\r\n\r\n  return (\r\n    <div className={`message ${you && 'you'}`} ref={divRef}>\r\n      <div className=\"message__content\">\r\n        <div className=\"message__date u-vSmall-text\">{time}</div>\r\n        {content}\r\n        <div className=\"dropdown__group\">\r\n          <IconButton\r\n            onClick={() => setIsDropdownShown(prev => !prev)}\r\n            style={{ padding: '.3rem' }}\r\n          >\r\n            <AngleDown fontSize=\"small\" />\r\n          </IconButton>\r\n          {isDropdownShown && (\r\n            <Dropdown\r\n              listItems={[\r\n                ['Remove message', () => deleteMessage(id)],\r\n                ['Message Info', () => viewMessageInfo(id)],\r\n              ]}\r\n              alignRight={you}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/ES_Mouth Pop 1 - SFX Producer.d4f98ffd.mp3\";","export default __webpack_public_path__ + \"static/media/ES_Mouth Pop 2 - SFX Producer.a92926d3.mp3\";","import React, { useContext, useRef, useEffect } from 'react';\r\nimport context from '../../store/context';\r\nimport Message from './Message';\r\nimport { Howl } from 'howler';\r\n\r\nimport sound_1Src from '../../assets/ES_Mouth Pop 1 - SFX Producer.mp3';\r\nimport sound_2Src from '../../assets/ES_Mouth Pop 2 - SFX Producer.mp3';\r\n\r\nconst pop_1SoundEffect = new Howl({\r\n  src: sound_1Src,\r\n  volume: 0.5,\r\n});\r\nconst pop_2SoundEffect = new Howl({\r\n  src: sound_2Src,\r\n  volume: 0.5,\r\n});\r\n\r\nexport default function MessagesList() {\r\n  const { userMessages, activeChat, parseEmail } = useContext(context);\r\n  const messages = userMessages[parseEmail(activeChat)].messages;\r\n  let lastMessagesNumber = useRef(0);\r\n  const messagesListRef = useRef(null);\r\n  const messagesList = messages.map(({ id, content, date, provider }) => (\r\n    <Message\r\n      key={id}\r\n      id={id}\r\n      content={content}\r\n      date={new Date(date)}\r\n      you={provider !== activeChat}\r\n    />\r\n  ));\r\n  const scrollToBottom = () => {\r\n    if (messagesListRef.current) {\r\n      const element = messagesListRef.current;\r\n      element.scrollTop = element.scrollHeight;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (messagesList.length - 1 === lastMessagesNumber.current) {\r\n      scrollToBottom();\r\n      if (messages[messages.length - 1].provider === activeChat) {\r\n        pop_1SoundEffect.play();\r\n      } else {\r\n        pop_2SoundEffect.play();\r\n      }\r\n    }\r\n    lastMessagesNumber.current = messagesList.length;\r\n  }, [messagesList]);\r\n\r\n  useEffect(() => {\r\n    scrollToBottom();\r\n  }, [activeChat]);\r\n\r\n  /*\r\n   * When to scroll\r\n    - adding a new task (the user himself)\r\n    - changing the active player\r\n  */\r\n\r\n  return (\r\n    <div className=\"messagesList\" ref={messagesListRef}>\r\n      {messagesList}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n// import { GrEmoji as Emoji } from 'react-icons/gr';\r\nimport { BiSmile as Emoji } from 'react-icons/bi';\r\nimport { IoMdSend as Send } from 'react-icons/io';\r\nimport Picker from 'emoji-picker-react';\r\nimport context from '../../store/context';\r\n\r\nexport default function Form() {\r\n  const [isPickerShown, setIsPickerShown] = useState(false);\r\n  const [content, setContent] = useState('');\r\n  const { addMessage } = useContext(context);\r\n\r\n  return (\r\n    <form\r\n      className={`message-form ${isPickerShown && 'picker-shown'}`}\r\n      onSubmit={e => {\r\n        e.preventDefault();\r\n        addMessage(content);\r\n        setContent('');\r\n      }}\r\n    >\r\n      <Picker\r\n        onEmojiClick={(e, emojiObject) => {\r\n          setContent(prev => {\r\n            const prevArr = prev.split('');\r\n            prevArr.push(emojiObject.emoji);\r\n            return prevArr.join('');\r\n          });\r\n        }}\r\n      />\r\n      <IconButton onClick={() => setIsPickerShown(prev => !prev)}>\r\n        <Emoji />\r\n      </IconButton>\r\n      <input\r\n        type=\"text\"\r\n        className=\"message-form__input\"\r\n        placeholder=\"Type a message\"\r\n        value={content}\r\n        onChange={e => setContent(e.target.value)}\r\n      />\r\n      <IconButton type=\"submit\">\r\n        <Send />\r\n      </IconButton>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { SiGooglehangoutschat as Logo } from 'react-icons/si';\r\nimport Card from '@material-ui/core/Card';\r\n\r\nexport default function Alert({ friendsNumber }) {\r\n  return (\r\n    <div className=\"alert\">\r\n      <Card className=\"alert__content\">\r\n        <h2 className=\"header-secondary\">Alert</h2>\r\n        <hr />\r\n        <Logo className=\"alert__logo\" />\r\n        {friendsNumber < 3 ? (\r\n          <>\r\n            <p>\r\n              Problem:{' '}\r\n              {friendsNumber > 0 && friendsNumber < 4\r\n                ? `You just have ${friendsNumber} `\r\n                : `You have no `}\r\n              {friendsNumber === 1 ? 'friend' : 'friends'}\r\n            </p>\r\n            {friendsNumber < 4 && (\r\n              <p>\r\n                Need to win some friends go to this{' '}\r\n                <a\r\n                  target=\"_blank\"\r\n                  href=\"https://www.wikihow.com/Make-Friends\"\r\n                  rel=\"noreferrer\"\r\n                >\r\n                  ARTICLE\r\n                </a>\r\n              </p>\r\n            )}\r\n          </>\r\n        ) : null}\r\n        <p>Please select any chat</p>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useContext, useEffect, useRef } from 'react';\r\nimport Header from './Header';\r\nimport MessagesList from './MessagesList';\r\nimport Form from './Form';\r\nimport context from '../../store/context';\r\nimport Alert from './Alert';\r\n\r\nexport default function Main() {\r\n  const { activeChat, chatsEmails } = useContext(context);\r\n\r\n  return (\r\n    <main className=\"main\">\r\n      {(activeChat && (\r\n        <>\r\n          <Header />\r\n          <MessagesList />\r\n          <Form />\r\n        </>\r\n      )) || <Alert friendsNumber={chatsEmails.length} />}\r\n    </main>\r\n  );\r\n}\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyCt1h_RTazHNrIlUmDns3Fs1aooB_B9jyA',\r\n  authDomain: 'chatty-whatty.firebaseapp.com',\r\n  databaseURL: 'https://chatty-whatty-default-rtdb.firebaseio.com',\r\n  projectId: 'chatty-whatty',\r\n  storageBucket: 'chatty-whatty.appspot.com',\r\n  messagingSenderId: '227921399269',\r\n  appId: '1:227921399269:web:4ce87d78bfae535132b30c',\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const db = firebase.database();\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\nexport const auth = firebase.auth();\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport { FcGoogle as Google } from 'react-icons/fc';\r\nimport { SiGooglehangoutschat as Logo } from 'react-icons/si';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Alert from '@material-ui/lab/Alert';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    marginLeft: '10px',\r\n  },\r\n});\r\n\r\nexport default function Login({ onSignIn, isLoading, error }) {\r\n  const circleClasses = useStyles();\r\n  return (\r\n    <Paper elevation={5} className=\"login\">\r\n      {error && <Alert severity=\"error\">{error}</Alert>}\r\n      <Logo className=\"login__logo\" />\r\n\r\n      <p>\r\n        You're not currently SIGNED IN, so SIGN IN first to be able to use the\r\n        app.\r\n      </p>\r\n      <Button\r\n        variant=\"outlined\"\r\n        startIcon={<Google />}\r\n        className=\"login__btn\"\r\n        onClick={onSignIn}\r\n      >\r\n        Sign In with google\r\n        {isLoading && (\r\n          <CircularProgress size={20} className={circleClasses.root} />\r\n        )}\r\n      </Button>\r\n    </Paper>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport Sidebar from './components/Sidebar/Sidebar';\r\nimport Main from './components/Chatting/Main';\r\nimport { db, auth, provider } from './firebase';\r\nimport Login from './components/Login/Login';\r\nimport Context from './store/context';\r\nimport { v4 as uuid } from 'uuid';\r\nimport Paper from '@material-ui/core/Paper';\r\nconst parseEmail = email => {\r\n  const emailArr = email.split('');\r\n  const i = email.lastIndexOf('@');\r\n  return emailArr.slice(0, i).join('');\r\n};\r\n\r\nexport default function App() {\r\n  const [user, setUser] = useState();\r\n  const [chatsEmails, setChatsEmails] = useState([]);\r\n  const [chats, setChats] = useState([]);\r\n  const [userMessages, setUserMessages] = useState({});\r\n  const [activeChat, setActiveChat] = useState('');\r\n  const [value, setValue] = useState(0);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  /*\r\n  - sign in\r\n  - send user data to the database if user is new\r\n  */\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      setIsLoading(true);\r\n      auth.onAuthStateChanged(accountData => {\r\n        console.log(accountData);\r\n        if (accountData) {\r\n          const { email, displayName: name, photoURL: thumbnail } = accountData;\r\n          setUser({ email, name, thumbnail });\r\n        } else {\r\n          setIsLoading(false);\r\n        }\r\n      });\r\n    })();\r\n  }, []);\r\n\r\n  const signIn = async () => {\r\n    try {\r\n      //sign in\r\n      setIsLoading(true);\r\n\r\n      const data = await auth.signInWithPopup(provider);\r\n\r\n      const {\r\n        isNewUser,\r\n        profile: { email, name, picture: thumbnail },\r\n      } = data.additionalUserInfo;\r\n      setUser({ email, name, thumbnail });\r\n\r\n      // sending data to the database\r\n\r\n      if (isNewUser) {\r\n        db.ref(`/users/${parseEmail(email)}/info`).set({\r\n          email,\r\n          name,\r\n          thumbnail,\r\n        });\r\n      }\r\n\r\n      localStorage.setItem(\r\n        'USER_DATA',\r\n        JSON.stringify({ email, name, thumbnail }),\r\n      );\r\n    } catch (err) {\r\n      setError(err.message);\r\n      setIsLoading(false);\r\n      setTimeout(() => setError(null), 3000);\r\n    }\r\n  };\r\n\r\n  // get user data from the local storage if it's existed\r\n\r\n  /*\r\n  - get chatsEmails and update it whenever something is changed in the database\r\n  - get messages and update it whenever something is chnaged in the database\r\n  */\r\n\r\n  useEffect(() => {\r\n    // getting chatsEmails and messages and adding an event listener to update them\r\n\r\n    if (user) {\r\n      db.ref(`/users/${parseEmail(user.email)}/chats`).on('value', snapshot => {\r\n        if (snapshot.val()) {\r\n          const emails = Object.keys(snapshot.val()).map(\r\n            email => `${email}@gmail.com`,\r\n          );\r\n\r\n          if (!emails.includes(activeChat)) {\r\n            setActiveChat('');\r\n          }\r\n\r\n          if (JSON.stringify(chatsEmails) !== JSON.stringify(emails)) {\r\n            setChatsEmails(emails);\r\n          }\r\n\r\n          setUserMessages(() => {\r\n            const messagesObj = snapshot.val();\r\n            Object.keys(messagesObj).map(key => {\r\n              if (!messagesObj[key].messages) {\r\n                messagesObj[key].messages = [];\r\n              }\r\n              return messagesObj;\r\n            });\r\n            return messagesObj;\r\n          });\r\n          setValue(prev => prev + 1);\r\n        } else {\r\n          setActiveChat('');\r\n          setChatsEmails([]);\r\n        }\r\n      });\r\n    }\r\n\r\n    return () => {\r\n      if (user) {\r\n        db.ref(`/users/${parseEmail(user.email)}/chats`).off();\r\n      }\r\n    };\r\n  }, [user, activeChat, chatsEmails]);\r\n\r\n  // get chats and update it\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      (async () => {\r\n        try {\r\n          if (chatsEmails.length === 0) setChats([]);\r\n          else {\r\n            const newChats = await Promise.all(\r\n              chatsEmails.map(async chatEmail => {\r\n                let info;\r\n                await db\r\n                  .ref(`users/${parseEmail(chatEmail)}/info`)\r\n                  .once('value', snapshot => {\r\n                    info = snapshot.val();\r\n                  });\r\n                return info;\r\n              }),\r\n            );\r\n\r\n            setChats(newChats);\r\n          }\r\n        } catch (err) {\r\n          setError(\"Couldn't fetch user chats\");\r\n        }\r\n        setIsLoading(false);\r\n      })();\r\n    }\r\n  }, [chatsEmails]);\r\n\r\n  // Profile Functions:\r\n\r\n  const signOut = () => {\r\n    auth.signOut();\r\n    setUser(null);\r\n    setChats([]);\r\n    setUserMessages([]);\r\n    setChatsEmails([]);\r\n    setActiveChat('');\r\n    localStorage.removeItem('USER_DATA');\r\n  };\r\n\r\n  const addChat = async email => {\r\n    try {\r\n      if (email === user.email) throw new Error('This is you!');\r\n      if (chatsEmails.includes(email))\r\n        throw new Error('User is existed already');\r\n      let isExisted;\r\n      await db\r\n        .ref(`/users/${parseEmail(email)}/info`)\r\n        .once('value', snapshot => {\r\n          if (!snapshot.val()) isExisted = false;\r\n          if (snapshot.val()) isExisted = true;\r\n        });\r\n      if (!isExisted) throw new Error(\"This user isn't even using or app\");\r\n      if (isExisted) {\r\n        const updates = {};\r\n\r\n        updates[`/users/${parseEmail(user.email)}/chats/${parseEmail(email)}`] =\r\n          { isExisted, messages: [] };\r\n        updates[`/users/${parseEmail(email)}/chats/${parseEmail(user.email)}`] =\r\n          {\r\n            isExisted,\r\n            messages: [],\r\n          };\r\n\r\n        db.ref().update(updates);\r\n      }\r\n    } catch (err) {\r\n      alert(err);\r\n    }\r\n  };\r\n\r\n  // ChatsList Functions:\r\n\r\n  const onChatSelect = email => {\r\n    setActiveChat(prev => {\r\n      if (prev === email) return '';\r\n      return email;\r\n    });\r\n  };\r\n  // Header Functions\r\n\r\n  const resetChat = email => {\r\n    // locally\r\n\r\n    setUserMessages(prev => {\r\n      prev[parseEmail(email)].messages = [];\r\n      return prev;\r\n    });\r\n\r\n    // database\r\n\r\n    db.ref(\r\n      `/users/${parseEmail(user.email)}/chats/${parseEmail(email)}/messages`,\r\n    ).remove();\r\n    db.ref(\r\n      `/users/${parseEmail(email)}/chats/${parseEmail(user.email)}/messages`,\r\n    ).remove();\r\n  };\r\n\r\n  const deleteChat = email => {\r\n    // locally\r\n\r\n    const newChatsEmails = [...chatsEmails];\r\n    newChatsEmails.splice(newChatsEmails.indexOf(parseEmail(email)), 1);\r\n\r\n    setActiveChat('');\r\n    setChatsEmails(newChatsEmails);\r\n\r\n    // database\r\n    db.ref(\r\n      `/users/${parseEmail(user.email)}/chats/${parseEmail(email)}`,\r\n    ).remove();\r\n    db.ref(\r\n      `/users/${parseEmail(email)}/chats/${parseEmail(user.email)}`,\r\n    ).remove();\r\n  };\r\n\r\n  // Message Functions\r\n\r\n  const updateActiveChatMessages = () => {\r\n    db.ref(\r\n      `/users/${parseEmail(user.email)}/chats/${parseEmail(\r\n        activeChat,\r\n      )}/messages`,\r\n    ).set(userMessages[parseEmail(activeChat)].messages);\r\n    db.ref(\r\n      `/users/${parseEmail(activeChat)}/chats/${parseEmail(\r\n        user.email,\r\n      )}/messages`,\r\n    ).set(userMessages[parseEmail(activeChat)].messages);\r\n  };\r\n\r\n  const deleteMessage = id => {\r\n    // locally\r\n    const messages = userMessages[parseEmail(activeChat)].messages;\r\n    const i = messages.findIndex(message => message.id === id);\r\n    if (messages[i].provider === user.email) {\r\n      messages.splice(i, 1);\r\n      setUserMessages();\r\n      setValue(value => value + 1);\r\n\r\n      // database\r\n\r\n      updateActiveChatMessages();\r\n    }\r\n  };\r\n\r\n  const viewMessageInfo = id => {\r\n    const { date, content, provider } = userMessages[\r\n      parseEmail(activeChat)\r\n    ].messages.find(message => message.id === id);\r\n    alert(`Content: ${content}\\nDate: ${date}\\nWriter: ${provider}`);\r\n  };\r\n\r\n  // Form Functions\r\n\r\n  const addMessage = content => {\r\n    // locally\r\n\r\n    if (content) {\r\n      setUserMessages(prev => {\r\n        prev[parseEmail(activeChat)].messages.push({\r\n          id: uuid(),\r\n          content,\r\n          date: new Date().toString(),\r\n          provider: user.email,\r\n        });\r\n\r\n        return prev;\r\n      });\r\n\r\n      setValue(value => value + 1);\r\n\r\n      // database\r\n\r\n      updateActiveChatMessages();\r\n    }\r\n  };\r\n\r\n  return user && !isLoading & !error ? (\r\n    <Context.Provider\r\n      value={{\r\n        user,\r\n        signOut,\r\n        addChat,\r\n        chats,\r\n        chatsEmails,\r\n        userMessages,\r\n        value,\r\n        activeChat,\r\n        onChatSelect,\r\n        parseEmail,\r\n        resetChat,\r\n        deleteChat,\r\n        viewMessageInfo,\r\n        deleteMessage,\r\n        addMessage,\r\n      }}\r\n    >\r\n      <Paper elevation={10} className=\"app\">\r\n        <Sidebar />\r\n        <Main />\r\n      </Paper>\r\n    </Context.Provider>\r\n  ) : (\r\n    <Login onSignIn={signIn} isLoading={isLoading} error={error} />\r\n  );\r\n}\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './sass/main.scss';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}